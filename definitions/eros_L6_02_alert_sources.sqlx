config {
  type: "operations",
  hasOutput: false,
  tags: ["L6", "alert_sources"],
  dependencies: ["eros_L5_02_materialize_next24_active"],
  description: "================================================================"
}

-- ================================================================
-- EROS L6.02: Alert Source Detection and Event Generation
-- ================================================================
-- Real-time monitoring views and alert source detection
-- Generates events when thresholds are breached or anomalies detected
-- ================================================================

-- Real-time system health monitoring
CREATE OR REPLACE VIEW `of-scheduler-proj.layer_06_monitoring.v_system_health_metrics` AS
WITH current_metrics AS (
  -- ML System Health
  SELECT
    'ML_SYSTEM' AS metric_category,
    'ml_recommendations_freshness' AS metric_name,
    TIMESTAMP_DIFF(CURRENT_TIMESTAMP(), MAX(generated_at), MINUTE) AS metric_value,
    'MINUTES' AS unit,
    CASE
      WHEN TIMESTAMP_DIFF(CURRENT_TIMESTAMP(), MAX(generated_at), MINUTE) > 120 THEN 'CRITICAL'
      WHEN TIMESTAMP_DIFF(CURRENT_TIMESTAMP(), MAX(generated_at), MINUTE) > 60 THEN 'HIGH'
      WHEN TIMESTAMP_DIFF(CURRENT_TIMESTAMP(), MAX(generated_at), MINUTE) > 30 THEN 'MEDIUM'
      ELSE 'LOW'
    END AS alert_level,
    COUNT(*) AS sample_size
  FROM `of-scheduler-proj.layer_04_ml.next24_ml_recommendations_latest`

  UNION ALL

  -- Data Ingestion Health
  SELECT
    'DATA_INGESTION',
    'staging_data_freshness',
    TIMESTAMP_DIFF(CURRENT_TIMESTAMP(), MAX(loaded_at), MINUTE),
    'MINUTES',
    CASE
      WHEN TIMESTAMP_DIFF(CURRENT_TIMESTAMP(), MAX(loaded_at), MINUTE) > 360 THEN 'CRITICAL'
      WHEN TIMESTAMP_DIFF(CURRENT_TIMESTAMP(), MAX(loaded_at), MINUTE) > 180 THEN 'HIGH'
      WHEN TIMESTAMP_DIFF(CURRENT_TIMESTAMP(), MAX(loaded_at), MINUTE) > 60 THEN 'MEDIUM'
      ELSE 'LOW'
    END,
    COUNT(*)
  FROM `of-scheduler-proj.layer_00_ingestion.mass_message_incoming_stage`
  WHERE DATE(loaded_at) = CURRENT_DATE()

  UNION ALL

  -- Duplicate Detection
  SELECT
    'DATA_QUALITY',
    'duplicate_messages_count',
    COUNT(*),
    'COUNT',
    CASE
      WHEN COUNT(*) > 10 THEN 'CRITICAL'
      WHEN COUNT(*) > 5 THEN 'HIGH'
      WHEN COUNT(*) > 0 THEN 'MEDIUM'
      ELSE 'LOW'
    END,
    COUNT(*)
  FROM `of-scheduler-proj.layer_00_ingestion.v_l0_sanity_duplicates`

  UNION ALL

  -- System Error Rate
  SELECT
    'SYSTEM_ERRORS',
    'error_rate_last_hour',
    COUNT(*),
    'COUNT',
    CASE
      WHEN COUNT(*) > 20 THEN 'CRITICAL'
      WHEN COUNT(*) > 10 THEN 'HIGH'
      WHEN COUNT(*) > 5 THEN 'MEDIUM'
      ELSE 'LOW'
    END,
    COUNT(*)
  FROM `of-scheduler-proj.layer_06_monitoring.system_events`
  WHERE event_type LIKE '%ERROR%'
    AND event_timestamp >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 1 HOUR)
)

SELECT
  CURRENT_TIMESTAMP() AS measurement_time,
  metric_category,
  metric_name,
  metric_value,
  unit,
  alert_level,
  sample_size,

  -- Alert flags
  CASE WHEN alert_level IN ('HIGH', 'CRITICAL') THEN true ELSE false END AS should_alert,
  CASE WHEN alert_level = 'CRITICAL' THEN true ELSE false END AS is_critical

FROM current_metrics
;

-- Performance metrics monitoring
CREATE OR REPLACE VIEW `of-scheduler-proj.layer_06_monitoring.v_performance_metrics` AS
WITH performance_data AS (
  SELECT
    creator_name,

    -- Recent performance (last 24 hours)
    AVG(CASE
      WHEN DATE(sending_time) = CURRENT_DATE()
      THEN CASE WHEN viewed > 0 THEN viewed / GREATEST(sent, 1) ELSE 0 END
    END) AS view_rate_24h,

    AVG(CASE
      WHEN DATE(sending_time) = CURRENT_DATE()
      THEN CASE WHEN purchased > 0 THEN purchased / GREATEST(viewed, 1) ELSE 0 END
    END) AS conversion_rate_24h,

    SUM(CASE
      WHEN DATE(sending_time) = CURRENT_DATE()
      THEN earnings
      ELSE 0
    END) AS revenue_24h,

    COUNT(CASE
      WHEN DATE(sending_time) = CURRENT_DATE()
      THEN message_id
    END) AS messages_24h,

    -- 7-day rolling averages for comparison
    AVG(CASE
      WHEN DATE(sending_time) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)
      THEN CASE WHEN viewed > 0 THEN viewed / GREATEST(sent, 1) ELSE 0 END
    END) AS view_rate_7d,

    AVG(CASE
      WHEN DATE(sending_time) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)
      THEN CASE WHEN purchased > 0 THEN purchased / GREATEST(viewed, 1) ELSE 0 END
    END) AS conversion_rate_7d,

    SUM(CASE
      WHEN DATE(sending_time) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)
      THEN earnings
      ELSE 0
    END) / 7 AS avg_daily_revenue_7d,

    -- Last message timing
    MAX(sending_time) AS last_message_time

  FROM `of-scheduler-proj.layer_00_ingestion.mass_message_master`
  WHERE DATE(sending_time) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)
    AND sent > 0
  GROUP BY creator_name
),

performance_alerts AS (
  SELECT
    creator_name,
    view_rate_24h,
    conversion_rate_24h,
    revenue_24h,
    messages_24h,
    view_rate_7d,
    conversion_rate_7d,
    avg_daily_revenue_7d,
    last_message_time,
    TIMESTAMP_DIFF(CURRENT_TIMESTAMP(), last_message_time, HOUR) AS hours_since_last_message,

    -- Performance change calculations
    CASE
      WHEN view_rate_7d > 0 THEN (view_rate_24h - view_rate_7d) / view_rate_7d
      ELSE 0
    END AS view_rate_change_pct,

    CASE
      WHEN conversion_rate_7d > 0 THEN (conversion_rate_24h - conversion_rate_7d) / conversion_rate_7d
      ELSE 0
    END AS conversion_rate_change_pct,

    CASE
      WHEN avg_daily_revenue_7d > 0 THEN (revenue_24h - avg_daily_revenue_7d) / avg_daily_revenue_7d
      ELSE 0
    END AS revenue_change_pct,

    -- Alert conditions
    CASE
      WHEN view_rate_24h < 0.03 THEN 'CRITICAL'
      WHEN view_rate_24h < 0.05 THEN 'HIGH'
      WHEN view_rate_24h < 0.08 THEN 'MEDIUM'
      ELSE 'LOW'
    END AS view_rate_alert_level,

    CASE
      WHEN conversion_rate_24h < 0.02 THEN 'CRITICAL'
      WHEN conversion_rate_24h < 0.03 THEN 'HIGH'
      WHEN conversion_rate_24h < 0.05 THEN 'MEDIUM'
      ELSE 'LOW'
    END AS conversion_alert_level,

    CASE
      WHEN TIMESTAMP_DIFF(CURRENT_TIMESTAMP(), last_message_time, HOUR) > 48 THEN 'HIGH'
      WHEN TIMESTAMP_DIFF(CURRENT_TIMESTAMP(), last_message_time, HOUR) > 24 THEN 'MEDIUM'
      ELSE 'LOW'
    END AS inactivity_alert_level

  FROM performance_data
)

SELECT
  CURRENT_TIMESTAMP() AS measurement_time,
  creator_name,

  -- Current metrics
  ROUND(view_rate_24h, 4) AS view_rate_24h,
  ROUND(conversion_rate_24h, 4) AS conversion_rate_24h,
  ROUND(revenue_24h, 2) AS revenue_24h,
  messages_24h,

  -- Comparison metrics
  ROUND(view_rate_7d, 4) AS view_rate_7d_avg,
  ROUND(conversion_rate_7d, 4) AS conversion_rate_7d_avg,
  ROUND(avg_daily_revenue_7d, 2) AS avg_daily_revenue_7d,

  -- Performance changes
  ROUND(view_rate_change_pct * 100, 1) AS view_rate_change_percent,
  ROUND(conversion_rate_change_pct * 100, 1) AS conversion_rate_change_percent,
  ROUND(revenue_change_pct * 100, 1) AS revenue_change_percent,

  -- Alert levels
  view_rate_alert_level,
  conversion_alert_level,
  inactivity_alert_level,

  -- Timing info
  last_message_time,
  hours_since_last_message,

  -- Overall alert status
  CASE
    WHEN view_rate_alert_level = 'CRITICAL' OR conversion_alert_level = 'CRITICAL' THEN 'CRITICAL'
    WHEN view_rate_alert_level = 'HIGH' OR conversion_alert_level = 'HIGH' OR inactivity_alert_level = 'HIGH' THEN 'HIGH'
    WHEN view_rate_alert_level = 'MEDIUM' OR conversion_alert_level = 'MEDIUM' OR inactivity_alert_level = 'MEDIUM' THEN 'MEDIUM'
    ELSE 'LOW'
  END AS overall_alert_level,

  -- Alert flags
  CASE WHEN view_rate_alert_level IN ('HIGH', 'CRITICAL') OR
            conversion_alert_level IN ('HIGH', 'CRITICAL') OR
            inactivity_alert_level = 'HIGH'
       THEN true ELSE false END AS should_alert

FROM performance_alerts
WHERE creator_name IS NOT NULL
;

-- ML model drift detection
CREATE OR REPLACE VIEW `of-scheduler-proj.layer_06_monitoring.v_ml_drift_detection` AS
WITH prediction_accuracy AS (
  SELECT
    DATE(sending_time) AS prediction_date,

    -- Calculate actual vs predicted performance
    AVG(CASE WHEN viewed > 0 THEN viewed / GREATEST(sent, 1) ELSE 0 END) AS actual_avg_view_rate,
    AVG(CASE WHEN purchased > 0 THEN purchased / GREATEST(viewed, 1) ELSE 0 END) AS actual_avg_conversion_rate,

    -- These would be joined from stored predictions in a real implementation
    0.08 AS predicted_avg_view_rate,  -- Placeholder
    0.04 AS predicted_avg_conversion_rate,  -- Placeholder

    COUNT(*) AS sample_size,
    STDDEV(CASE WHEN viewed > 0 THEN viewed / GREATEST(sent, 1) ELSE 0 END) AS view_rate_stddev

  FROM `of-scheduler-proj.layer_00_ingestion.mass_message_master`
  WHERE DATE(sending_time) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
    AND sent > 0
  GROUP BY DATE(sending_time)
  HAVING sample_size >= 10
),

drift_metrics AS (
  SELECT
    prediction_date,
    actual_avg_view_rate,
    actual_avg_conversion_rate,
    predicted_avg_view_rate,
    predicted_avg_conversion_rate,
    sample_size,
    view_rate_stddev,

    -- Calculate prediction errors
    ABS(actual_avg_view_rate - predicted_avg_view_rate) AS view_rate_error,
    ABS(actual_avg_conversion_rate - predicted_avg_conversion_rate) AS conversion_rate_error,

    -- Calculate relative errors
    ABS(actual_avg_view_rate - predicted_avg_view_rate) / NULLIF(actual_avg_view_rate, 0) AS view_rate_relative_error,
    ABS(actual_avg_conversion_rate - predicted_avg_conversion_rate) / NULLIF(actual_avg_conversion_rate, 0) AS conversion_rate_relative_error,

    -- Moving averages for trend detection
    AVG(actual_avg_view_rate) OVER (
      ORDER BY prediction_date
      ROWS BETWEEN 6 PRECEDING AND CURRENT ROW
    ) AS view_rate_7d_ma,

    AVG(ABS(actual_avg_view_rate - predicted_avg_view_rate)) OVER (
      ORDER BY prediction_date
      ROWS BETWEEN 6 PRECEDING AND CURRENT ROW
    ) AS view_rate_error_7d_ma

  FROM prediction_accuracy
),

drift_alerts AS (
  SELECT
    *,

    -- Drift detection flags
    CASE
      WHEN view_rate_relative_error > 0.5 THEN 'CRITICAL'
      WHEN view_rate_relative_error > 0.3 THEN 'HIGH'
      WHEN view_rate_relative_error > 0.2 THEN 'MEDIUM'
      ELSE 'LOW'
    END AS view_rate_drift_level,

    CASE
      WHEN conversion_rate_relative_error > 0.6 THEN 'CRITICAL'
      WHEN conversion_rate_relative_error > 0.4 THEN 'HIGH'
      WHEN conversion_rate_relative_error > 0.3 THEN 'MEDIUM'
      ELSE 'LOW'
    END AS conversion_rate_drift_level,

    -- Trend analysis
    CASE
      WHEN view_rate_error_7d_ma > LAG(view_rate_error_7d_ma, 3) OVER (ORDER BY prediction_date) * 1.5
      THEN 'DETERIORATING'
      WHEN view_rate_error_7d_ma < LAG(view_rate_error_7d_ma, 3) OVER (ORDER BY prediction_date) * 0.8
      THEN 'IMPROVING'
      ELSE 'STABLE'
    END AS accuracy_trend

  FROM drift_metrics
)

SELECT
  CURRENT_TIMESTAMP() AS measurement_time,
  prediction_date,

  -- Actual performance
  ROUND(actual_avg_view_rate, 4) AS actual_view_rate,
  ROUND(actual_avg_conversion_rate, 4) AS actual_conversion_rate,

  -- Predicted performance
  ROUND(predicted_avg_view_rate, 4) AS predicted_view_rate,
  ROUND(predicted_avg_conversion_rate, 4) AS predicted_conversion_rate,

  -- Error metrics
  ROUND(view_rate_error, 4) AS view_rate_mae,
  ROUND(conversion_rate_error, 4) AS conversion_rate_mae,
  ROUND(view_rate_relative_error * 100, 1) AS view_rate_mape_percent,
  ROUND(conversion_rate_relative_error * 100, 1) AS conversion_rate_mape_percent,

  -- Alert levels
  view_rate_drift_level,
  conversion_rate_drift_level,
  accuracy_trend,

  -- Moving averages
  ROUND(view_rate_7d_ma, 4) AS view_rate_7d_trend,
  ROUND(view_rate_error_7d_ma, 4) AS error_7d_trend,

  sample_size,

  -- Overall drift assessment
  CASE
    WHEN view_rate_drift_level = 'CRITICAL' OR conversion_rate_drift_level = 'CRITICAL'
    THEN 'CRITICAL'
    WHEN view_rate_drift_level = 'HIGH' OR conversion_rate_drift_level = 'HIGH'
    THEN 'HIGH'
    WHEN view_rate_drift_level = 'MEDIUM' OR conversion_rate_drift_level = 'MEDIUM'
    THEN 'MEDIUM'
    ELSE 'LOW'
  END AS overall_drift_level,

  -- Alert flag
  CASE WHEN view_rate_drift_level IN ('HIGH', 'CRITICAL') OR
            conversion_rate_drift_level IN ('HIGH', 'CRITICAL') OR
            accuracy_trend = 'DETERIORATING'
       THEN true ELSE false END AS should_alert

FROM drift_alerts
WHERE prediction_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)
ORDER BY prediction_date DESC
;

-- Business metrics monitoring
CREATE OR REPLACE VIEW `of-scheduler-proj.layer_06_monitoring.v_business_metrics` AS
WITH revenue_metrics AS (
  SELECT
    -- Daily revenue metrics
    SUM(CASE WHEN DATE(sending_time) = CURRENT_DATE() THEN earnings ELSE 0 END) AS revenue_today,
    SUM(CASE WHEN DATE(sending_time) = DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY) THEN earnings ELSE 0 END) AS revenue_yesterday,
    SUM(CASE WHEN DATE(sending_time) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN earnings ELSE 0 END) AS revenue_7d,
    SUM(CASE WHEN DATE(sending_time) >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)
             AND DATE(sending_time) < DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN earnings ELSE 0 END) AS revenue_prev_7d,

    -- Message volume metrics
    COUNT(CASE WHEN DATE(sending_time) = CURRENT_DATE() THEN message_id END) AS messages_today,
    COUNT(CASE WHEN DATE(sending_time) = DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY) THEN message_id END) AS messages_yesterday,
    COUNT(CASE WHEN DATE(sending_time) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN message_id END) AS messages_7d,

    -- Creator activity metrics
    COUNT(DISTINCT CASE WHEN DATE(sending_time) = CURRENT_DATE() THEN sender END) AS active_creators_today,
    COUNT(DISTINCT CASE WHEN DATE(sending_time) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN sender END) AS active_creators_7d,

    -- Performance metrics
    AVG(CASE WHEN DATE(sending_time) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)
             AND viewed > 0 THEN viewed / GREATEST(sent, 1) ELSE NULL END) AS avg_view_rate_7d,
    AVG(CASE WHEN DATE(sending_time) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)
             AND purchased > 0 THEN purchased / GREATEST(viewed, 1) ELSE NULL END) AS avg_conversion_rate_7d

  FROM `of-scheduler-proj.layer_00_ingestion.mass_message_master`
  WHERE DATE(sending_time) >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)
    AND sent > 0
),

business_alerts AS (
  SELECT
    *,

    -- Revenue change calculations
    CASE
      WHEN revenue_yesterday > 0 THEN (revenue_today - revenue_yesterday) / revenue_yesterday
      ELSE 0
    END AS revenue_change_daily_pct,

    CASE
      WHEN revenue_prev_7d > 0 THEN (revenue_7d - revenue_prev_7d) / revenue_prev_7d
      ELSE 0
    END AS revenue_change_weekly_pct,

    -- Message volume changes
    CASE
      WHEN messages_yesterday > 0 THEN (messages_today - messages_yesterday) / CAST(messages_yesterday AS FLOAT64)
      ELSE 0
    END AS message_volume_change_pct,

    -- Revenue per message
    CASE
      WHEN messages_7d > 0 THEN revenue_7d / messages_7d
      ELSE 0
    END AS revenue_per_message_7d

  FROM revenue_metrics
)

SELECT
  CURRENT_TIMESTAMP() AS measurement_time,

  -- Revenue metrics
  ROUND(revenue_today, 2) AS revenue_today,
  ROUND(revenue_yesterday, 2) AS revenue_yesterday,
  ROUND(revenue_7d, 2) AS revenue_7d,
  ROUND(revenue_prev_7d, 2) AS revenue_prev_7d,

  -- Volume metrics
  messages_today,
  messages_yesterday,
  messages_7d,
  active_creators_today,
  active_creators_7d,

  -- Performance metrics
  ROUND(avg_view_rate_7d, 4) AS avg_view_rate_7d,
  ROUND(avg_conversion_rate_7d, 4) AS avg_conversion_rate_7d,
  ROUND(revenue_per_message_7d, 2) AS revenue_per_message_7d,

  -- Change metrics
  ROUND(revenue_change_daily_pct * 100, 1) AS revenue_change_daily_percent,
  ROUND(revenue_change_weekly_pct * 100, 1) AS revenue_change_weekly_percent,
  ROUND(message_volume_change_pct * 100, 1) AS message_volume_change_percent,

  -- Alert conditions
  CASE
    WHEN revenue_change_daily_pct < -0.3 THEN 'CRITICAL'
    WHEN revenue_change_daily_pct < -0.2 THEN 'HIGH'
    WHEN revenue_change_daily_pct < -0.1 THEN 'MEDIUM'
    ELSE 'LOW'
  END AS revenue_decline_alert_level,

  CASE
    WHEN active_creators_today < active_creators_7d * 0.5 THEN 'HIGH'
    WHEN active_creators_today < active_creators_7d * 0.7 THEN 'MEDIUM'
    ELSE 'LOW'
  END AS creator_activity_alert_level,

  CASE
    WHEN message_volume_change_pct < -0.5 THEN 'HIGH'
    WHEN message_volume_change_pct < -0.3 THEN 'MEDIUM'
    ELSE 'LOW'
  END AS volume_decline_alert_level,

  -- Overall business health
  CASE
    WHEN revenue_change_daily_pct < -0.2 OR active_creators_today < active_creators_7d * 0.5
    THEN 'CRITICAL'
    WHEN revenue_change_daily_pct < -0.1 OR message_volume_change_pct < -0.3
    THEN 'HIGH'
    WHEN revenue_change_weekly_pct < -0.1 OR message_volume_change_pct < -0.2
    THEN 'MEDIUM'
    ELSE 'LOW'
  END AS business_health_alert_level,

  -- Alert flag
  CASE
    WHEN revenue_change_daily_pct < -0.1 OR
         active_creators_today < active_creators_7d * 0.7 OR
         message_volume_change_pct < -0.3
    THEN true ELSE false
  END AS should_alert

FROM business_alerts
;